--[[
This file is part of luax.

luax is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

luax is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with luax.  If not, see <https://www.gnu.org/licenses/>.

For further information about luax you can visit
http://cdelord.fr/luax
--]]

---------------------------------------------------------------------
-- crypt
---------------------------------------------------------------------

if not _LUAX_VERSION then return function() end end

local crypt = require "crypt"

require "test"

return function()
    do
        local x = "foobarbaz"
        local y = crypt.hex(x)
        local z = x:hex()
        eq(y, "666F6F62617262617A")
        eq(y, z)
        eq(crypt.unhex(y), x)
        eq(z:unhex(), x)
        for _ = 1, 1000 do
            local s = crypt.rands(256)
            eq(s:hex():unhex(), s)
        end
    end
    do
        do
            local x = "foobarbaz"
            local y = crypt.base64(x)
            local z = x:base64()
            eq(y, "Zm9vYmFyYmF6")
            eq(y, z)
            eq(crypt.unbase64(y), x)
            eq(z:unbase64(), x)
        end
        do
            local x = "foobarbaz1"
            local y = crypt.base64(x)
            local z = x:base64()
            eq(y, "Zm9vYmFyYmF6MQ==")
            eq(y, z)
            eq(crypt.unbase64(y), x)
            eq(z:unbase64(), x)
        end
        do
            local x = "foobarbaz12"
            local y = crypt.base64(x)
            local z = x:base64()
            eq(y, "Zm9vYmFyYmF6MTI=")
            eq(y, z)
            eq(crypt.unbase64(y), x)
            eq(z:unbase64(), x)
        end
        eq((""):base64():unbase64(), "")
        for i = 0, 255 do
            eq(string.char(i):base64():unbase64(), string.char(i))
        end
        for i = 1, 1000 do
            local s = crypt.rands(256 + i%3)
            eq(s:base64():unbase64(), s)
            eq(s:base64url():unbase64url(), s)
            eq(s:base64url(), s:base64():gsub("+", "-"):gsub("/", "_"))
        end
    end
    do
        local x = "foo123456789"
        local y = crypt.crc32(x)
        local z = x:crc32()
        eq(y, 0x72871f0c)
        eq(y, z)
    end
    do
        local x = "foo123456789"
        local y = crypt.crc64(x)
        local z = x:crc64()
        eq(y, 0xd85c06f88a2a27d8)
        eq(y, z)
    end
    do
        do
            local x = "foobar!"
            local key = "rc4key"
            local y = crypt.rc4(x, key)
            local z = crypt.unrc4(y, key)
            ne(y, x)
            eq(z, x)
            eq(crypt.rc4(x, key), x:rc4(key))
            eq(crypt.unrc4(y, key), y:unrc4(key))
            eq(x:rc4(key):unrc4(key), x)
            for _ = 1, 1000 do
                local s = crypt.rands(256)
                local k = crypt.rands(256)
                eq(s:rc4(k):unrc4(k), s)
            end
        end
        for drop = 0, 10 do
            local x = "foobar!"
            local key = "rc4key"
            local y = crypt.rc4(x, key, drop)
            local z = crypt.unrc4(y, key, drop)
            ne(y, x)
            eq(z, x)
            eq(crypt.rc4(x, key, drop), x:rc4(key, drop))
            eq(crypt.unrc4(y, key, drop), y:unrc4(key, drop))
            eq(x:rc4(key, drop):unrc4(key, drop), x)
            for _ = 1, 1000 do
                local s = crypt.rands(256)
                local k = crypt.rands(256)
                eq(s:rc4(k, drop):unrc4(k, drop), s)
            end
        end
        do
            for _ = 1, 1000 do
                local s = crypt.rands(256)
                local k = crypt.rands(256)
                local drop = crypt.rand() % 4096
                eq(s:rc4(k, drop):unrc4(k, drop), s)
            end
        end
    end
    do
        local rands = {}
        local i = 0
        local done = false
        while not done and i < 10000 do
            i = i+1
            local x = crypt.rand() % 100                        eq(type(x), "number") eq(math.type(x), "integer")
            bounded(x, 0, 100)
            rands[x] = true
            done = true
            for y = 0, 99 do done = done and rands[y] end
        end
        eq(done, true)
        bounded(i, 100, 2000)
        for _ = 1, 1000 do
            local x = crypt.rand()                              eq(type(x), "number") eq(math.type(x), "integer")
            local y = crypt.rand()                              eq(type(y), "number") eq(math.type(y), "integer")
            bounded(x, 0, crypt.RAND_MAX)
            bounded(y, 0, crypt.RAND_MAX)
            ne(x, y)
        end
        for _ = 1, 1000 do
            local x = crypt.randf()                             eq(type(x), "number") eq(math.type(x), "float")
            local y = crypt.randf()                             eq(type(y), "number") eq(math.type(y), "float")
            bounded(x, 0.0, 1.0)
            bounded(y, 0.0, 1.0)
            ne(x, y)
        end
        for _ = 1, 1000 do
            local x = crypt.rands(16)                           eq(type(x), "string")
            local y = crypt.rands(16)                           eq(type(y), "string")
            eq(#x, 16)
            eq(#y, 16)
            ne(x, y)
        end
        for _ = 1, 1000 do
            bounded(crypt.rand(), 0, crypt.RAND_MAX)
            bounded(crypt.rand(15), 1, 15)
            bounded(crypt.rand(5, 15), 5, 15)
            bounded(crypt.randf(), 0.0, 1.0)
            bounded(crypt.randf(3.5), 0.0, 3.5)
            bounded(crypt.randf(2.5, 3.5), 2.5, 3.5)
        end
    end
    do
        local r1 = crypt.prng(42)
        local r2 = crypt.prng(42)
        local r3 = crypt.prng(43)
        for _ = 1, 1000 do
            local x1 = r1:rand()                                eq(type(x1), "number") eq(math.type(x1), "integer")
            local x2 = r2:rand()                                eq(type(x2), "number") eq(math.type(x2), "integer")
            local x3 = r3:rand()                                eq(type(x2), "number") eq(math.type(x3), "integer")
            eq(x1, x2)
            ne(x1, x3)
            local s1 = r1:rands(32)                             eq(type(s1), "string") eq(#s1, 32)
            local s2 = r2:rands(32)                             eq(type(s2), "string") eq(#s2, 32)
            local s3 = r3:rands(32)                             eq(type(s3), "string") eq(#s3, 32)
            eq(s1, s2)
            ne(s1, s3)
            local f1 = r1:randf()                               eq(type(f1), "number") eq(math.type(f1), "float")
            local f2 = r2:randf()                               eq(type(f2), "number") eq(math.type(f2), "float")
            local f3 = r3:randf()                               eq(type(f3), "number") eq(math.type(f3), "float")
            eq(f1, f2)
            ne(f1, f3)
        end
        for _ = 1, 1000 do
            bounded(r1:rand(), 0, crypt.RAND_MAX)
            bounded(r1:rand(15), 1, 15)
            bounded(r1:rand(5, 15), 5, 15)
            bounded(r1:randf(), 0.0, 1.0)
            bounded(r1:randf(3.5), 0.0, 3.5)
            bounded(r1:randf(2.5, 3.5), 2.5, 3.5)
        end
    end

    -- TinyCrypt tests
    local function bytes(s)
        local bs = table.pack(s:byte(1, #s))
        bs.n = nil
        return bs
    end
    do
        eq(bytes(crypt.sha256("abc")), { 0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea, 0x41, 0x41, 0x40, 0xde, 0x5d, 0xae, 0x22, 0x23, 0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c, 0xb4, 0x10, 0xff, 0x61, 0xf2, 0x00, 0x15, 0xad })
        eq(bytes(crypt.sha256("abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq")), { 0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39, 0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67, 0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1 })
        eq(bytes(crypt.sha256("\xbd")), { 0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d, 0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0, 0x8f, 0xfe, 0x73, 0x2b })
        eq(bytes(crypt.sha256("\xc9\x8c\x8e\x55")), { 0x7a, 0xbc, 0x22, 0xc0, 0xae, 0x5a, 0xf2, 0x6c, 0xe9, 0x3d, 0xbb, 0x94, 0x43, 0x3a, 0x0e, 0x0b, 0x2e, 0x11, 0x9d, 0x01, 0x4f, 0x8e, 0x7f, 0x65, 0xbd, 0x56, 0xc6, 0x1c, 0xcc, 0xcd, 0x95, 0x04 })
        eq(bytes(crypt.sha256(("\x00"):rep(55))), { 0x02, 0x77, 0x94, 0x66, 0xcd, 0xec, 0x16, 0x38, 0x11, 0xd0, 0x78, 0x81, 0x5c, 0x63, 0x3f, 0x21, 0x90, 0x14, 0x13, 0x08, 0x14, 0x49, 0x00, 0x2f, 0x24, 0xaa, 0x3e, 0x80, 0xf0, 0xb8, 0x8e, 0xf7 })
        eq(bytes(crypt.sha256(("\x00"):rep(56))), { 0xd4, 0x81, 0x7a, 0xa5, 0x49, 0x76, 0x28, 0xe7, 0xc7, 0x7e, 0x6b, 0x60, 0x61, 0x07, 0x04, 0x2b, 0xbb, 0xa3, 0x13, 0x08, 0x88, 0xc5, 0xf4, 0x7a, 0x37, 0x5e, 0x61, 0x79, 0xbe, 0x78, 0x9f, 0xbb })
        eq(bytes(crypt.sha256(("\x00"):rep(57))), { 0x65, 0xa1, 0x6c, 0xb7, 0x86, 0x13, 0x35, 0xd5, 0xac, 0xe3, 0xc6, 0x07, 0x18, 0xb5, 0x05, 0x2e, 0x44, 0x66, 0x07, 0x26, 0xda, 0x4c, 0xd1, 0x3b, 0xb7, 0x45, 0x38, 0x1b, 0x23, 0x5a, 0x17, 0x85 })
        eq(bytes(crypt.sha256(("\x00"):rep(64))), { 0xf5, 0xa5, 0xfd, 0x42, 0xd1, 0x6a, 0x20, 0x30, 0x27, 0x98, 0xef, 0x6e, 0xd3, 0x09, 0x97, 0x9b, 0x43, 0x00, 0x3d, 0x23, 0x20, 0xd9, 0xf0, 0xe8, 0xea, 0x98, 0x31, 0xa9, 0x27, 0x59, 0xfb, 0x4b })
        eq(bytes(crypt.sha256(("\x00"):rep(1000))), { 0x54, 0x1b, 0x3e, 0x9d, 0xaa, 0x09, 0xb2, 0x0b, 0xf8, 0x5f, 0xa2, 0x73, 0xe5, 0xcb, 0xd3, 0xe8, 0x01, 0x85, 0xaa, 0x4e, 0xc2, 0x98, 0xe7, 0x65, 0xdb, 0x87, 0x74, 0x2b, 0x70, 0x13, 0x8a, 0x53 })
        eq(bytes(crypt.sha256(("\x41"):rep(1000))), { 0xc2, 0xe6, 0x86, 0x82, 0x34, 0x89, 0xce, 0xd2, 0x01, 0x7f, 0x60, 0x59, 0xb8, 0xb2, 0x39, 0x31, 0x8b, 0x63, 0x64, 0xf6, 0xdc, 0xd8, 0x35, 0xd0, 0xa5, 0x19, 0x10, 0x5a, 0x1e, 0xad, 0xd6, 0xe4 })
        eq(bytes(crypt.sha256(("\x55"):rep(1005))), { 0xf4, 0xd6, 0x2d, 0xde, 0xc0, 0xf3, 0xdd, 0x90, 0xea, 0x13, 0x80, 0xfa, 0x16, 0xa5, 0xff, 0x8d, 0xc4, 0xc5, 0x4b, 0x21, 0x74, 0x06, 0x50, 0xf2, 0x4a, 0xfc, 0x41, 0x20, 0x90, 0x35, 0x52, 0xb0 })
        for _ = 1, 1000 do
            local s = crypt.rands(crypt.rand()%1024)
            eq(s:sha256(), crypt.sha256(s))
        end
    end
    do
        local function hmac_test(key, data, expected)
            key = string.char(table.unpack(key))
            data = string.char(table.unpack(data))
            eq(bytes(crypt.hmac(data, key)), expected)
        end
        hmac_test(
            { 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b },
            { 0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65 },
            { 0xb0, 0x34, 0x4c, 0x61, 0xd8, 0xdb, 0x38, 0x53, 0x5c, 0xa8, 0xaf, 0xce, 0xaf, 0x0b, 0xf1, 0x2b, 0x88, 0x1d, 0xc2, 0x00, 0xc9, 0x83, 0x3d, 0xa7, 0x26, 0xe9, 0x37, 0x6c, 0x2e, 0x32, 0xcf, 0xf7 }
        )
        hmac_test(
            { 0x4a, 0x65, 0x66, 0x65 },
            { 0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20, 0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x3f },
            { 0x5b, 0xdc, 0xc1, 0x46, 0xbf, 0x60, 0x75, 0x4e, 0x6a, 0x04, 0x24, 0x26, 0x08, 0x95, 0x75, 0xc7, 0x5a, 0x00, 0x3f, 0x08, 0x9d, 0x27, 0x39, 0x83, 0x9d, 0xec, 0x58, 0xb9, 0x64, 0xec, 0x38, 0x43 }
        )
        hmac_test(
            { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa },
            { 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd },
            { 0x77, 0x3e, 0xa9, 0x1e, 0x36, 0x80, 0x0e, 0x46, 0x85, 0x4d, 0xb8, 0xeb, 0xd0, 0x91, 0x81, 0xa7, 0x29, 0x59, 0x09, 0x8b, 0x3e, 0xf8, 0xc1, 0x22, 0xd9, 0x63, 0x55, 0x14, 0xce, 0xd5, 0x65, 0xfe }
        )
        hmac_test(
            { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19 },
            { 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd },
            { 0x82, 0x55, 0x8a, 0x38, 0x9a, 0x44, 0x3c, 0x0e, 0xa4, 0xcc, 0x81, 0x98, 0x99, 0xf2, 0x08, 0x3a, 0x85, 0xf0, 0xfa, 0xa3, 0xe5, 0x78, 0xf8, 0x07, 0x7a, 0x2e, 0x3f, 0xf4, 0x67, 0x29, 0x66, 0x5b }
        )
        hmac_test(
            { 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c },
            { 0x54, 0x65, 0x73, 0x74, 0x20, 0x57, 0x69, 0x74, 0x68, 0x20, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e },
            { 0xa3, 0xb6, 0x16, 0x74, 0x73, 0x10, 0x0e, 0xe0, 0x6e, 0x0c, 0x79, 0x6c, 0x29, 0x55, 0x55, 0x2b, 0xfa, 0x6f, 0x7c, 0x0a, 0x6a, 0x8a, 0xef, 0x8b, 0x93, 0xf8, 0x60, 0xaa, 0xb0, 0xcd, 0x20, 0xc5 }
        )
        hmac_test(
            { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa },
            { 0x54, 0x65, 0x73, 0x74, 0x20, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x54, 0x68, 0x61, 0x6e, 0x20, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x2d, 0x20, 0x48, 0x61, 0x73, 0x68, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x46, 0x69, 0x72, 0x73, 0x74 },
            { 0x60, 0xe4, 0x31, 0x59, 0x1e, 0xe0, 0xb6, 0x7f, 0x0d, 0x8a, 0x26, 0xaa, 0xcb, 0xf5, 0xb7, 0x7f, 0x8e, 0x0b, 0xc6, 0x21, 0x37, 0x28, 0xc5, 0x14, 0x05, 0x46, 0x04, 0x0f, 0x0e, 0xe3, 0x7f, 0x54 }
        )
        hmac_test(
            { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa },
            { 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x48, 0x4d, 0x41, 0x43, 0x20, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e },
            { 0x9b, 0x09, 0xff, 0xa7, 0x1b, 0x94, 0x2f, 0xcb, 0x27, 0x63, 0x5f, 0xbc, 0xd5, 0xb0, 0xe9, 0x44, 0xbf, 0xdc, 0x63, 0x64, 0x4f, 0x07, 0x13, 0x93, 0x8a, 0x7f, 0x51, 0x53, 0x5c, 0x3a, 0x35, 0xe2 }
        )
        for _ = 1, 1000 do
            local k = crypt.rands(crypt.rand()%1024)
            local s = crypt.rands(crypt.rand()%1024)
            eq(s:hmac(k), crypt.hmac(s, k))
        end
    end
    do
        local r1 = crypt.hmac_prng(("42"):rep(32))
        local r2 = crypt.hmac_prng(("42"):rep(32))
        local r3 = crypt.hmac_prng(("43"):rep(32))
        for _ = 1, 1000 do
            local x1 = r1:rand()                                eq(type(x1), "number") eq(math.type(x1), "integer")
            local x2 = r2:rand()                                eq(type(x2), "number") eq(math.type(x2), "integer")
            local x3 = r3:rand()                                eq(type(x3), "number") eq(math.type(x3), "integer")
            ne(x1, x2)
            ne(x1, x3)
            ne(x2, x3)
            local s1 = r1:rands(32)                             eq(type(s1), "string") eq(#s1, 32)
            local s2 = r2:rands(32)                             eq(type(s2), "string") eq(#s2, 32)
            local s3 = r3:rands(32)                             eq(type(s3), "string") eq(#s3, 32)
            ne(s1, s2)
            ne(s1, s3)
            ne(s2, s3)
            local f1 = r1:randf()                               eq(type(f1), "number") eq(math.type(f1), "float")
            local f2 = r2:randf()                               eq(type(f2), "number") eq(math.type(f2), "float")
            local f3 = r3:randf()                               eq(type(f3), "number") eq(math.type(f3), "float")
            ne(f1, f2)
            ne(f1, f3)
            ne(f2, f3)
        end
        for _ = 1, 1000 do
            bounded(r1:rand(), 0, crypt.RAND_MAX)
            bounded(r1:rand(15), 1, 15)
            bounded(r1:rand(5, 15), 5, 15)
            bounded(r1:rand(-5, 15), -5, 15)
            bounded(r1:randf(), 0.0, 1.0)
            bounded(r1:randf(3.5), 0.0, 3.5)
            bounded(r1:randf(2.5, 3.5), 2.5, 3.5)
            bounded(r1:randf(-2.5, 3.5), -2.5, 3.5)
        end
    end
    do
        local r1 = crypt.ctr_prng(("42"):rep(32))
        local r2 = crypt.ctr_prng(("42"):rep(32))
        local r3 = crypt.ctr_prng(("43"):rep(32))
        for _ = 1, 1000 do
            local x1 = r1:rand()                                eq(type(x1), "number") eq(math.type(x1), "integer")
            local x2 = r2:rand()                                eq(type(x2), "number") eq(math.type(x2), "integer")
            local x3 = r3:rand()                                eq(type(x3), "number") eq(math.type(x3), "integer")
            ne(x1, x2)
            ne(x1, x3)
            ne(x2, x3)
            local s1 = r1:rands(32)                             eq(type(s1), "string") eq(#s1, 32)
            local s2 = r2:rands(32)                             eq(type(s2), "string") eq(#s2, 32)
            local s3 = r3:rands(32)                             eq(type(s3), "string") eq(#s3, 32)
            ne(s1, s2)
            ne(s1, s3)
            ne(s2, s3)
            local f1 = r1:randf()                               eq(type(f1), "number") eq(math.type(f1), "float")
            local f2 = r2:randf()                               eq(type(f2), "number") eq(math.type(f2), "float")
            local f3 = r3:randf()                               eq(type(f3), "number") eq(math.type(f3), "float")
            ne(f1, f2)
            ne(f1, f3)
            ne(f2, f3)
        end
        for _ = 1, 1000 do
            bounded(r1:rand(), 0, crypt.RAND_MAX)
            bounded(r1:rand(15), 1, 15)
            bounded(r1:rand(5, 15), 5, 15)
            bounded(r1:rand(-5, 15), -5, 15)
            bounded(r1:randf(), 0.0, 1.0)
            bounded(r1:randf(3.5), 0.0, 3.5)
            bounded(r1:randf(2.5, 3.5), 2.5, 3.5)
            bounded(r1:randf(-2.5, 3.5), -2.5, 3.5)
        end
    end
    do
        do
            for _ = 1, 1000 do
                local x = crypt.rands(crypt.rand()%256)
                local key = crypt.rands(crypt.rand()%256)
                local y1 = crypt.aes(x, key)
                local y2 = crypt.aes(x, key)
                local z1 = crypt.unaes(y1, key)
                local z2 = crypt.unaes(y2, key)
                ne(y1, x)
                ne(y2, x)
                ne(y1, y2)
                eq(z1, x)
                eq(z2, x)
            end
        end
        do
            for _ = 1, 1000 do
                local x = crypt.rands(crypt.rand()%256)
                local key = crypt.rands(crypt.rand()%256)
                local y1 = x:aes(key)
                local y2 = x:aes(key)
                local z1 = crypt.unaes(y1, key)
                local z2 = crypt.unaes(y2, key)
                ne(y1, x)
                ne(y2, x)
                ne(y1, y2)
                eq(z1, x)
                eq(z2, x)
            end
        end
        do
            for _ = 1, 1000 do
                local x = crypt.rands(crypt.rand()%256)
                local key = crypt.rands(crypt.rand()%256)
                local y1 = crypt.aes(x, key)
                local y2 = crypt.aes(x, key)
                local z1 = y1:unaes(key)
                local z2 = y2:unaes(key)
                ne(y1, x)
                ne(y2, x)
                ne(y1, y2)
                eq(z1, x)
                eq(z2, x)
            end
        end
    end
end
