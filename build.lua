#!/usr/bin/env luax

section [[
This file is part of luax.

luax is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

luax is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with luax.  If not, see <https://www.gnu.org/licenses/>.

For further information about luax you can visit
http://cdelord.fr/luax
]]

local F = require "F"
local fs = require "fs"

help.name "LuaX"
help.description [[
Lua eXtended
Copyright (C) 2021-2023 Christophe Delord (https://cdelord.fr/luax)

luax is a Lua interpreter and REPL based on Lua 5.4
augmented with some useful packages.
luax can also produce standalone executables from Lua scripts.

luax runs on several platforms with no dependency:

- Linux (x86_64, x86, aarch64)
- MacOS (x86_64, aarch64)
- Windows (x86_64, x86)

luax can « cross-compile » scripts from and to any of these platforms.
]]

section [[
WARNING: This file has been generated by bang. DO NOT MODIFY IT.
If you need to update the build system, please modify build.lua
and run bang to regenerate build.ninja.
]]

--===================================================================
section "Build environment"
---------------------------------------------------------------------

var "builddir" ".build"

var "bin" "$builddir/bin"
var "lib" "$builddir/lib"
var "doc" "$builddir/doc"
var "tmp" "$builddir/tmp"
var "test" "$builddir/test"

local targets = F{
    -- Linux
    "x86_64-linux-musl",
    "x86_64-linux-gnu",
    "x86-linux-musl",
    "x86-linux-gnu",
    "aarch64-linux-musl",
    "aarch64-linux-gnu",

    -- Windows
    "x86_64-windows-gnu",
    "x86-windows-gnu",

    -- MacOS
    "x86_64-macos-none",
    "aarch64-macos-none",
}

local compile = {}
local test = {}
local doc = {}

--===================================================================
section "Zig compiler"
---------------------------------------------------------------------

var "zig"           ".zig/zig"
var "zig_cache"     ".zig/cache"

rule "install_zig" {
    command = "tools/install_zig.sh $out",
}

build "$zig" { "install_zig",
    implicit_in = "tools/install_zig.sh",
}
--===================================================================
section "Third-party modules update"
---------------------------------------------------------------------

rule "update_modules" {
    command = {"tools/update-third-party-modules.sh", "$builddir/update"},
}

build "update_modules" { "update_modules" }

--===================================================================
section "LuaX configuration"
---------------------------------------------------------------------

comment [[
The configuration file (luax_config.h and luax_config.lua)
are created in `luax-libs`
]]

var "luax_config_h"   "$tmp/luax_config.h"
var "luax_config_lua" "$tmp/luax_config.lua"

local magic_id = "LuaX"

local crypt_key =
    os.getenv "CRYPT_KEY" or
    [[\x5d\xec\xc3\xbb\xe8\x40\x6e\x68\x7f\x20\xc2\x39\xf4\xa0\x27\x25]]

local luax_config_table = (F.I % "%%()") {
    CRYPT_KEY = crypt_key,
    MAGIC_ID = magic_id,
    TARGETS = targets:show(),
}

file "tools/gen_config_h.sh"
: write(luax_config_table[[
#!/bin/bash

LUAX_CONFIG_H="$1"

cat <<EOF > "$LUAX_CONFIG_H"
#pragma once
#define LUAX_VERSION "$(git describe --tags)"
#define LUAX_DATE "$(git show -s --format=%cd --date=format:'%Y-%m-%d')"
#define LUAX_CRYPT_KEY "%(CRYPT_KEY)"
#define LUAX_MAGIC_ID "%(MAGIC_ID)"
EOF
]])

rule "gen_config_h" {
    command = { "bash", "tools/gen_config_h.sh", "$out" },
}

build "$luax_config_h" { "gen_config_h",
    implicit_in = { ".git/refs/tags", ".git/index" },
}

file "tools/gen_config_lua.sh"
: write(luax_config_table[[
#!/bin/bash

LUAX_CONFIG_LUA="$1"

cat <<EOF > "$LUAX_CONFIG_LUA"
--@LIB
return {
    version = "$(git describe --tags)",
    date = "$(git show -s --format=%cd --date=format:'%Y-%m-%d')",
    magic_id = "%(MAGIC_ID)",
    targets = %(TARGETS),
}
EOF
]])

rule "gen_config_lua" {
    command = { "bash", "tools/gen_config_lua.sh", "$out" },
}

build "$luax_config_lua" { "gen_config_lua",
    implicit_in = { ".git/refs/tags", ".git/index" },
}

--===================================================================
section "LuaX sources"
---------------------------------------------------------------------

comment [[
The lists of C sources for Zig build are generated in luax-c-sources.zig"
]]

local linux_only = F{
    "ext/c/luasocket/serial.c",
    "ext/c/luasocket/unixdgram.c",
    "ext/c/luasocket/unixstream.c",
    "ext/c/luasocket/usocket.c",
    "ext/c/luasocket/unix.c",
}
local windows_only = F{
    "ext/c/luasocket/wsocket.c",
}
local ignored_sources = F{
    "ext/c/lqmath/src/imath.c",
}

local zig = {
    lua_c_files = ls "lua/*.c"
        : filter(function(name) return F.not_elem(fs.basename(name), {"lua.c", "luac.c"}) end),
    lua_main_c_files = F{ "lua/lua.c" },
    luax_main_c_files = F{ "luax/luax.c" },
    luax_c_files = ls "luax-libs/**.c",
    third_party_c_files = ls "ext/c/**.c"
        : filter(function(name) return F.not_elem(name, linux_only) end)
        : filter(function(name) return F.not_elem(name, windows_only) end)
        : filter(function(name) return F.not_elem(name, ignored_sources) end),
    linux_third_party_c_files = linux_only,
    windows_third_party_c_files = windows_only,
}

local function array(list_name)
    return F.flatten {
        "pub const "..list_name.." = [_][]const u8 {",
        zig[list_name]
            : map(function(name) return '    "'..name..'",' end),
        "};",
    } : unlines()
end

file "luax-c-sources.zig"
: write(F.I{array=array}[===[
// Generated by build.lua (bang)

$(array "lua_c_files")
$(array "lua_main_c_files")
$(array "luax_main_c_files")
$(array "luax_c_files")
$(array "third_party_c_files")
$(array "linux_third_party_c_files")
$(array "windows_third_party_c_files")
]===])

--===================================================================
section "Native Lua interpreter"
---------------------------------------------------------------------

var "lua" "$tmp/lua"

var "lua_path" (
    F{
        "./?.lua",
        "$tmp/./?.lua",
        "luax-libs/?.lua",
        fs.dir "luax-libs"
            : map(function(name)
                local path = fs.join("luax-libs", name)
                return fs.is_dir(path) and fs.join(path, "?.lua") or {}
            end),
    }
    : flatten()
    : str ";"
)

rule "build-lua" {
    command = {
        ". tools/detect.sh;",
        "$zig build",
            "--cache-dir $zig_cache",
            "--prefix `dirname $out` --prefix-exe-dir \"\"",
            "-Dtarget=$$ARCH-$$OS-$$LIBC",
            "--build-file $in",
        "&& touch $out",
    },
}

build "$lua" { "build-lua", "build-lua.zig",
    implicit_in = {
        "$zig",
        zig.lua_c_files,
        zig.lua_main_c_files,
    },
}

--===================================================================
section "Lua runtime"
---------------------------------------------------------------------

local luax_runtime = F.flatten{
    ls "luax-libs/**.lua",
    ls "ext/**.lua",
}

var "luax_runtime_bundle" "$tmp/lua_runtime_bundle.dat"

rule "bundle_luax_runtime" {
    command = {
        "LUA_PATH=\"$lua_path\"",
        "CRYPT_KEY=\""..crypt_key.."\"",
        "$lua",
        "-l tools/rc4_runtime",
        "luax/bundle.lua", "-lib -ascii",
        "$in > $out.tmp",
        "&& touch $out.tmp",
        "&& mv $out.tmp $out",
    },
}

build "$luax_runtime_bundle" { "bundle_luax_runtime",
    "$luax_config_lua",
    luax_runtime,
    implicit_in = {
        "$lua",
        "luax/bundle.lua",
        "tools/rc4_runtime.lua",
    },
}

--===================================================================
section "C runtimes"
---------------------------------------------------------------------

local function is_linux(target)
    return target:match "linux" or target:match "macos"
end

local function is_windows(target)
    return target:match "windows"
end

local function ext(target)
    return is_windows(target) and ".exe" or ""
end

local function shared_libs(target)
    if target : match "musl"    then return nil end
    if target : match "linux"   then return "libluax-"..target..".so" end
    if target : match "macos"   then return "libluax-"..target..".dylib" end
    if target : match "windows" then return "luax-"..target..".dll" end
    error("Unknown shared libary for "..target)
end

targets : foreach(function(target)

    section(target.." runtime")

    local e = ext(target)

    local shared_lib = shared_libs(target)
    local shared_lib_name = shared_lib and fs.join("$tmp", "lib", shared_lib)

    rule("build-runtime-"..target) {
        command = {
            "RUNTIME_NAME=luaxruntime LIB_NAME=luax",
            "$zig build",
                "--cache-dir $zig_cache",
                "--prefix `dirname $out` --prefix-exe-dir \"\"",
                "-Dtarget="..target,
                "--build-file $in",
            "&& touch $out", shared_lib_name,
        },
    }

    build("$tmp/luaxruntime-"..target..e) { "build-runtime-"..target, "build.zig",
        implicit_in = {
            "$zig",
            zig.lua_c_files,
            zig.luax_c_files,
            zig.luax_main_c_files,
            zig.third_party_c_files,
            is_linux(target) and linux_third_party_c_files or {},
            is_windows(target) and windows_third_party_c_files or {},
            "$luax_runtime_bundle",
            "$luax_config_h",
        },
        implicit_out = {
            shared_lib_name or {},
        },
    }

end)

--===================================================================
section "LuaX binaries"
---------------------------------------------------------------------

local luax_packages = F.flatten {
    ls "luax/*.lua",
    "$luax_config_lua",
}

rule "cp" { command = {"cp", "$in", "$out"} }

local binaries = {}
local libraries = {}

targets : foreach(function(target)

    section("LuaX "..target)

    local e = ext(target)

    local shared_lib = shared_libs(target)

    rule("bundle-luax-"..target) {
        command = {
            "cp", "$tmp/luaxruntime-"..target..e, "$out.tmp",
            "&&",
            "LUA_PATH=\"$lua_path\"",
            "CRYPT_KEY=\""..crypt_key.."\"",
            "$lua",
            "-l tools/rc4_runtime",
            "luax/bundle.lua", "-binary",
            "$in >> $out.tmp",
            "&& touch $out.tmp",
            "&& mv $out.tmp $out",
        },
    }

    build("$bin/luax-"..target..e) { "bundle-luax-"..target,
        luax_packages,
        implicit_in = {
            "$lua",
            "tools/rc4_runtime.lua",
            "luax/bundle.lua",
            "$tmp/luaxruntime-"..target..e,
        },
    }
    install "bin" ("$bin/luax-"..target..e)
    default("$bin/luax-"..target..e)
    acc(compile)("$bin/luax-"..target..e)
    acc(binaries)("$bin/luax-"..target..e)

    if shared_lib then

        build("$lib/"..shared_lib) {
            "cp", fs.join("$tmp", "lib", shared_lib)
        }
        install "lib" ("$lib/"..shared_lib)
        default("$lib/"..shared_lib)
        acc(compile)("$lib/"..shared_lib)
        acc(libraries)("$lib/"..shared_lib)

    end

end)

rule "luax_shortcut" {
    command = {
        ". tools/detect.sh;",
        "cp", "-f", "$bin/luax-$$ARCH-$$OS-$$LIBC$$EXT", "$out$$EXT",
    }
}

var "luax" "$bin/luax"

build "$luax" { "luax_shortcut", implicit_in = binaries }

install "bin" "$luax"
default "$luax"
acc(compile) "$luax"

--===================================================================
section "LuaX Lua implementation"
---------------------------------------------------------------------

--===================================================================
section "$lib/luax.lua"
---------------------------------------------------------------------

local lib_luax_sources = F.flatten{
    ls "luax-libs/**.lua",
    ls "ext/lua/**.lua",
}

rule "bundle_lib_luax" {
    command = {
        "LUA_PATH=\"$lua_path\"",
        "CRYPT_KEY=\""..crypt_key.."\"",
        "$lua",
        "-l tools/rc4_runtime",
        "luax/bundle.lua", "-lib -lua",
        "$in > $out.tmp",
        "&& touch $out.tmp",
        "&& mv $out.tmp $out",
    },
}

build "$lib/luax.lua" { "bundle_lib_luax",
    "$luax_config_lua",
    lib_luax_sources,
    implicit_in = {
        "$lua",
        "luax/bundle.lua",
        "tools/rc4_runtime.lua",
    },
}

install "lib" "$lib/luax.lua"
default "$lib/luax.lua"
acc(compile) "$lib/luax.lua"

--===================================================================
section "$bin/luax-lua"
---------------------------------------------------------------------

rule "luax-compile-to-lua" {
    command = { "$luax", "-q -t lua", "-o $out $in" },
}

build "$bin/luax-lua" { "luax-compile-to-lua",
    "luax/luax.lua",
    implicit_in = { "$luax", "$lib/luax.lua" },
}

install "bin" "$bin/luax-lua"
default "$bin/luax-lua"
acc(compile) "$bin/luax-lua"

--===================================================================
section "$bin/luax-pandoc"
---------------------------------------------------------------------

rule "luax-compile-to-pandoc" {
    command = { "$luax", "-q -t pandoc", "-o $out $in" },
}

build "$bin/luax-pandoc" { "luax-compile-to-pandoc",
    "luax/luax.lua",
    implicit_in = { "$luax", "$lib/luax.lua" },
}

install "bin" "$bin/luax-pandoc"
default "$bin/luax-pandoc"
acc(compile) "$bin/luax-pandoc"

--===================================================================
section "Tests"
---------------------------------------------------------------------

local test_sources = ls "tests/luax-tests/*.*"
local test_main = "tests/luax-tests/main.lua"

---------------------------------------------------------------------

rule "test-1-luax_executable" {
    command = {
        ". tools/detect.sh;",
        "$luax -q -o $test/test-luax", test_sources,
        "&&",
        "TYPE=static LUA_PATH='tests/luax-tests/?.lua'",
        "TEST_NUM=1",
        "$test/test-luax Lua is great",
        "&&",
        "touch $out",
    },
}

build "$test/test-1-luax_executable.ok" { "test-1-luax_executable",
    implicit_in = {
        "$luax",
        test_sources,
    },
}

acc(test) "$test/test-1-luax_executable.ok"

---------------------------------------------------------------------

rule "test-2-lib" {
    command = {
        ". tools/detect.sh;",
        "eval `$luax env`;",
        "TYPE=dynamic LUA_PATH='tests/luax-tests/?.lua'",
        "TEST_NUM=2",
        "$lua", "-l libluax", test_main, "Lua is great",
        "&&",
        "touch $out",
    },
}

build "$test/test-2-lib.ok" { "test-2-lib",
    implicit_in = {
        "$lua",
        "$luax",
        libraries,
        test_sources,
    },
}

acc(test) "$test/test-2-lib.ok"

---------------------------------------------------------------------

rule "test-3-lua" {
    command = {
        ". tools/detect.sh;",
        "LIBC=lua TYPE=lua LUA_PATH='$lib/?.lua;tests/luax-tests/?.lua'",
        "TEST_NUM=3",
        "$lua", "-l luax", test_main, "Lua is great",
        "&&",
        "touch $out",
    },
}

build "$test/test-3-lua.ok" { "test-3-lua",
    implicit_in = {
        "$lua",
        "$lib/luax.lua",
        test_sources,
    },
}

acc(test) "$test/test-3-lua.ok"

---------------------------------------------------------------------

rule "test-4-lua-luax-lua" {
    command = {
        ". tools/detect.sh;",
        "LIBC=lua TYPE=lua LUA_PATH='$lib/?.lua;tests/luax-tests/?.lua'",
        "TEST_NUM=4",
        "$bin/luax-lua", test_main, "Lua is great",
        "&&",
        "touch $out",
    },
}

build "$test/test-4-lua-luax-lua.ok" { "test-4-lua-luax-lua",
    implicit_in = {
        "$lua",
        "$bin/luax-lua",
        test_sources,
    },
}

acc(test) "$test/test-4-lua-luax-lua.ok"

---------------------------------------------------------------------

rule "test-5-pandoc-luax-lua" {
    command = {
        ". tools/detect.sh;",
        "LIBC=lua TYPE=pandoc LUA_PATH='$lib/?.lua;tests/luax-tests/?.lua'",
        "TEST_NUM=5",
        "pandoc lua ", "-l luax", test_main, "Lua is great",
        "&&",
        "touch $out",
    },
}

build "$test/test-5-pandoc-luax-lua.ok" { "test-5-pandoc-luax-lua",
    implicit_in = {
        "$lua",
        "$lib/luax.lua",
        test_sources,
    },
}

acc(test) "$test/test-5-pandoc-luax-lua.ok"

---------------------------------------------------------------------

rule "test-6-pandoc-luax-so" {
    command = {
        ". tools/detect.sh;",
        "eval `$luax env`;",
        "TYPE=pandoc LUA_CPATH='$lib/?.so' LUA_PATH='$lib/?.lua;tests/luax-tests/?.lua'",
        "TEST_NUM=6",
        "pandoc lua ", "-l libluax", test_main, "Lua is great",
        "&&",
        "touch $out",
    },
}

build "$test/test-6-pandoc-luax-so.ok" { "test-6-pandoc-luax-so",
    implicit_in = {
        "$lua",
        "$luax",
        "$lib/luax.lua",
        test_sources,
    },
}

-- This test is disabled since most of the binary distributions of Pandoc do not support dynamic loading
--acc(test) "$test/test-6-pandoc-luax-so.ok"

---------------------------------------------------------------------

rule "test-ext-1-lua" {
    command = {
        ". tools/detect.sh;",
        "eval `$luax env`;",
        "$luax -q -t lua -o $test/ext-lua", "$in",
        "&&",
        "TARGET=lua",
        "$test/ext-lua Lua is great",
        "&&",
        "touch $out",
    },
}

build "$test/test-ext-1-lua.ok" { "test-ext-1-lua",
    "tests/external_interpreter_tests/external_interpreters.lua",
    implicit_in = {
        "$lib/luax.lua",
        "$luax",
        binaries,
    },
}

acc(test) "$test/test-ext-1-lua.ok"

---------------------------------------------------------------------

rule "test-ext-2-lua-luax" {
    command = {
        ". tools/detect.sh;",
        "eval `$luax env`;",
        "$luax -q -t lua-luax -o $test/ext-lua-luax", "$in",
        "&&",
        "TARGET=lua-luax",
        "$test/ext-lua-luax Lua is great",
        "&&",
        "touch $out",
    },
}

build "$test/test-ext-2-lua-luax.ok" { "test-ext-2-lua-luax",
    "tests/external_interpreter_tests/external_interpreters.lua",
    implicit_in = {
        "$lib/luax.lua",
        "$luax",
    },
}

acc(test) "$test/test-ext-2-lua-luax.ok"

---------------------------------------------------------------------

rule "test-ext-3-luax" {
    command = {
        ". tools/detect.sh;",
        "eval `$luax env`;",
        "$luax -q -t luax -o $test/ext-luax", "$in",
        "&&",
        "TARGET=luax",
        "$test/ext-luax Lua is great",
        "&&",
        "touch $out",
    },
}

build "$test/test-ext-3-luax.ok" { "test-ext-3-luax",
    "tests/external_interpreter_tests/external_interpreters.lua",
    implicit_in = {
        "$lib/luax.lua",
        "$luax",
    },
}

acc(test) "$test/test-ext-3-luax.ok"

---------------------------------------------------------------------

rule "test-ext-4-pandoc" {
    command = {
        ". tools/detect.sh;",
        "eval `$luax env`;",
        "$luax -q -t pandoc -o $test/ext-pandoc", "$in",
        "&&",
        "TARGET=pandoc",
        "$test/ext-pandoc Lua is great",
        "&&",
        "touch $out",
    },
}

build "$test/test-ext-4-pandoc.ok" { "test-ext-4-pandoc",
    "tests/external_interpreter_tests/external_interpreters.lua",
    implicit_in = {
        "$lib/luax.lua",
        "$luax",
        binaries,
    },
}

acc(test) "$test/test-ext-4-pandoc.ok"

---------------------------------------------------------------------

rule "test-ext-5-pandoc-luax" {
    command = {
        ". tools/detect.sh;",
        "eval `$luax env`;",
        "$luax -q -t pandoc-luax -o $test/ext-pandoc-luax", "$in",
        "&&",
        "TARGET=pandoc-luax",
        "$test/ext-pandoc-luax Lua is great",
        "&&",
        "touch $out",
    },
}

build "$test/test-ext-5-pandoc-luax.ok" { "test-ext-5-pandoc-luax",
    "tests/external_interpreter_tests/external_interpreters.lua",
    implicit_in = {
        "$lib/luax.lua",
        "$luax",
    },
}

-- This test is disabled since most of the binary distributions of Pandoc do not support dynamic loading
--acc(test) "$test/test-ext-5-pandoc-luax.ok"

--===================================================================
section "Documentation"
---------------------------------------------------------------------

local markdown_sources = ls "doc/src/*.md"

local images = F{
    {img="doc/luax-banner.svg",             src="doc/src/luax-logo.lua",    rule="banner-1024" },
    {img="doc/luax-logo.svg",               src="doc/src/luax-logo.lua",    rule="logo-256" },
    {img="$builddir/luax-banner.png",       src="doc/src/luax-logo.lua",    rule="banner-1024" },
    {img="$builddir/luax-social.png",       src="doc/src/luax-logo.lua",    rule="social-1280" },
    {img="$builddir/luax-logo.png",         src="doc/src/luax-logo.lua",    rule="logo-1024" },
}

local url = "cdelord.fr/luax"

rule "banner-1024" { command = {"lsvg $in $out -- 1024 192"} }
rule "logo-256"    { command = {"lsvg $in $out -- 256 256"} }
rule "logo-1024"   { command = {"lsvg $in $out -- 1024 1024"} }
rule "social-1280" { command = {"lsvg $in $out -- 1280 640", "'"..url.."'"} }

images : foreach(function(image)
    build(image.img, {image.rule, image.src})
end)

local pandoc_gfm = {
    "pandoc",
    "--to gfm",
    "--lua-filter doc/src/fix_links.lua",
    "--fail-if-warnings",
}

rule "md_to_md" {
    command = {
        ". tools/detect.sh;",
        "LUAX=$bin/luax-$$ARCH-$$OS-$$LIBC",
        "ypp --MD --MT $out --MF $doc/$out.d $in",
        "|",
        pandoc_gfm, "-o $out",
    },
    depfile = "$doc/$out.d",
}

build "README.md" { "md_to_md", "doc/src/luax.md",
    implicit_in = {
        binaries,
        "doc/src/fix_links.lua",
        images,
    },
}

acc(doc) "README.md"

markdown_sources : foreach(function(src)

    local dst = fs.join("doc", fs.basename(src))

    build(dst) { "md_to_md", src,
        implicit_in = {
            binaries,
            "doc/src/fix_links.lua",
            images,
        },
    }

    acc(doc)(dst)

end)

--===================================================================
section "Shorcuts"
---------------------------------------------------------------------

clean "$builddir"

phony "compile" (compile)
help "compile" "compile LuaX"

phony "test-fast" (test[1])
help "test-fast" "run LuaX tests (fast, native tests only)"

phony "test" (test)
help "test" "run all LuaX tests"

phony "doc" (doc)
help "doc" "update LuaX documentation"

phony "all" {"compile", "test", "doc"}
help "all" "alias for compile, test and doc"

phony "update" "update_modules"
help "update" "update third-party modules"
